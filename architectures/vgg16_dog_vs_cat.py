# -*- coding: utf-8 -*-
"""vgg16_dog_vs_cat.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_G7FxH9qIxbxh3wC2U93dPQchaftAaZA
"""

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!kaggle competitions download -c dogs-vs-cats

from zipfile import ZipFile
with ZipFile("train.zip", 'r') as zip:
  zip.extractall()
  print('Done')

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import os
import numpy as np
import pandas as pd
import keras
import matplotlib.pyplot as plt
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPool2D , Flatten, Dropout
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam, RMSprop, SGD
from keras.callbacks import ModelCheckpoint, EarlyStopping, ReduceLROnPlateau
from sklearn.model_selection import train_test_split
from keras.preprocessing import image
from keras.models import load_model
from sklearn.utils import shuffle
import shutil
from tqdm import tqdm

"""Preparing the training data"""

if not os.path.exists("train1/"):
    os.mkdir("train1/")
if not os.path.exists("train1/dog/"):
    os.mkdir("train1/dog/")
if not os.path.exists("train1/cat/"):
    os.mkdir("train1/cat/")

for i in tqdm(os.listdir("train/")[0:20000]):
#     print(i)
    if i.split(".")[0] == "dog":
        shutil.copy2(os.path.join("train/",i),os.path.join("train1/dog/",i))
    elif i.split(".")[0] == "cat":
        shutil.copy2(os.path.join("train/",i),os.path.join("train1/cat/",i))

  
if not os.path.exists("test/"):
    os.mkdir("test/")
if not os.path.exists("test/dog/"):
    os.mkdir("test/dog/")
if not os.path.exists("test/cat/"):
    os.mkdir("test/cat/")

for i in tqdm(os.listdir("train/")[20000:]):
#     print(i)
    if i.split(".")[0] == "dog":
        shutil.copy2(os.path.join("train/",i),os.path.join("test/dog/",i))
    elif i.split(".")[0] == "cat":
        shutil.copy2(os.path.join("train/",i),os.path.join("test/cat/",i))

trdata = ImageDataGenerator()
train_generator = trdata.flow_from_directory(directory="train1",target_size=(224,224))
tsdata = ImageDataGenerator()
test_generator = tsdata.flow_from_directory(directory="test", target_size=(224,224))

model = Sequential()
model.add(Conv2D(input_shape=(224,224,3),filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(Conv2D(filters=64,kernel_size=(3,3),padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=128, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=256, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(Conv2D(filters=512, kernel_size=(3,3), padding="same", activation="relu"))
model.add(MaxPool2D(pool_size=(2,2),strides=(2,2)))

model.add(Flatten())
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=4096,activation="relu"))
model.add(Dense(units=2, activation="softmax"))

# model.add(Flatten())
# model.add(Dense(4096, activation='relu', kernel_initializer='he_uniform'))
# model.add(Dropout(rate=0.2))
# model.add(Dense(2, activation='softmax'))

model.compile(optimizer = Adam(lr=0.0001), loss = keras.losses.categorical_crossentropy, metrics=['accuracy'])

checkpoint = ModelCheckpoint("vgg16_2.h5", monitor='val_acc', verbose=1, save_best_only=True, save_weights_only=False, mode='auto', period=1)
early = EarlyStopping(monitor='val_acc', min_delta=0, patience=20, verbose=1, mode='auto')
#learning_rate_reduction = ReduceLROnPlateau(monitor='val_acc', patience=2, verbose=1, factor=0.5, min_lr=0.00001)

hist = model.fit_generator(steps_per_epoch = 100, generator=train_generator, validation_data=test_generator, validation_steps=10, epochs=100, callbacks=[checkpoint, early], use_multiprocessing=True)

plt.plot(hist.history["acc"])
plt.plot(hist.history['val_acc'])
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()

img = image.load_img("12479.jpg",target_size=(224,224))
img = np.asarray(img)
plt.imshow(img)
img = np.expand_dims(img, axis=0)

from google.colab import drive
drive.mount('/content/drive')

!cp vgg16_2.h5 /content/drive/My\ Drive/datasets

saved_model = load_model("vgg16_1.h5")
output = saved_model.predict(img)
if output[0][0] > output[0][1]:
    print("cat")
else:
    print('dog')